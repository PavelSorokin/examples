- name: Prepare PostgreSQL | check PostgreSQL is started
  become: true
  become_user: postgres
  command: "{{ pg_bin }}/pg_isready -p 5432"
  register: pg_isready_result
  until: pg_isready_result.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Prepare PostgreSQL | Who Master!?
  become: true
  become_user: postgres
  command: "{{ pg_bin }}/psql -p {{ pg_port }} -Aqtc 'SELECT pg_is_in_recovery();'"
  register: pg_is_in_recovery

- block:  # for master only
    - name: Prepare PostgreSQL | make sure the user postgres are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: postgres
        password: "{{ postgres_password }}"
        encrypted: true
        role_attr_flags: "SUPERUSER"
        login_unix_socket: "{{ pg_unix_socket_dir }}"
        port: "{{ pg_port }}"
        state: present
      become: true
      become_user: postgres

    - name: Prepare PostgreSQL | make sure the user repluser are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: repluser
        password: "{{ pgsqlrep_password }}"
        encrypted: true
        role_attr_flags: "LOGIN,REPLICATION"
        login_unix_socket: "{{ pg_unix_socket_dir }}"
        port: "{{ pg_port }}"
        state: present
      become: true
      become_user: postgres

    - name: Prepare PostgreSQL | check PostgreSQL is started
      become: true
      become_user: postgres
      command: "{{ pg_bin }}/pg_ctl status -D {{ pgdata }}"
      register: pg_ctl_status_result
      changed_when: false
      failed_when:
        - pg_ctl_status_result.rc != 0
        - pg_ctl_status_result.rc != 3

    - name: Prepare PostgreSQL | waiting for CHECKPOINT to complete
      become: true
      become_user: postgres
      command: "{{ pg_bin }}/psql -p {{ pg_port }} -c 'CHECKPOINT'"
      register: checkpoint_result
      until: checkpoint_result.rc == 0
      retries: 300
      delay: 10
      when: pg_ctl_status_result.rc == 0

    - name: REVOKE usage
      become: true
      become_user: postgres
      command: "{{ pg_bin }}/psql -p 5432 -c 'REVOKE USAGE ON SCHEMA public FROM PUBLIC;'"

    - name: copy scripts pg_probackup
      copy: 
        src: "{{ item.src }}" 
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: 0777
      with_items:
      - { src: "files/pg_probackup.sql",dest: "/home/postgres/scripts/pg_probackup.sql" }

    - name: Run pg_probackup sql file
      become: true
      become_user: postgres
      command: "{{ pg_bin }}/psql -p 5432 -f '/home/postgres/scripts/pg_probackup.sql'"

  when: pg_is_in_recovery.stdout == "f"

- block:  
    - name: Gerate pg_hba.conf on Master
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ pgdata }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640

    - name: Reload for apply the pg_hba.conf
      become: true
      become_user: postgres
      command: "{{ pg_bin }}/psql -p {{ pg_port }} -c 'SELECT pg_reload_conf()'"
      register: psql_reload_result
      failed_when: psql_reload_result.rc != 0

    - name: Generate pgpass
      template:
        src: templates/.pgpass_patroni.j2
        dest: "/home/postgres/.pgpass_patroni"
        owner: postgres
        group: postgres
        mode: 0600